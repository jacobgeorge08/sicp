#lang sicp
; Draw the tree illustrating the process generated by the count-change
; What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?
(define (count-change amount) (cc amount 5))
(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination
                         kinds-of-coins))
                     kinds-of-coins)))))
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

; 11 cents
(count-change 11)
; Just to recap how cc works is you take the amount and you split it into two parts
; ie how 11 cents can be generated with a denomination + how 11 cents can be generated without that denomination
; Drawing it with pen and paper btw

; Took a whole page even just for 11 cents but yeah
; Whatever amount you have , if you have only 1 kind of coin, the ways you can split is 1
; Got 4 after working out on paper which is the same as what rackets gives me

; The orders of growth of space is easier to understand, and is propotional to the max depth of the tree
; We get the longest branch when we call cc with pennies so theta (n) is the order of growth of space
; For theta (time), i couldnt figure it out. I know it was going to be something mad just looking at what
; I've drawn. Its tree recursion and a lot of operations repeated multiple times. The answer is n^5 btw
