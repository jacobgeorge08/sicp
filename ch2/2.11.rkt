#lang scheme

(define (make-interval a b) (cons a b))
(define (lower-bound x)
  (car x))
(define (upper-bound x)
  (cdr x))

(define (mul-interval x y)
  (let ((xl (lower-bound x))
        (xu (upper-bound x))
        (yl (lower-bound y))
        (yu (upper-bound y)))
    (cond ((> xl 0)
           (cond ((> yl 0) (make-interval (* xl yl) (* xu yu)))
                 ((< yu 0) (make-interval (* xu yl) (* xl yu)))
                 (else (make-interval (* xu yl) (* xu yu)))))
          ((< xu 0)
           (cond ((> yl 0) (make-interval (* xl yu) (* xu yl)))
                 ((< yu 0) (make-interval (* xu yu) (* xl yl)))
                 (else (make-interval (* xl yu) (* xl yl)))))
          (else
           (cond ((> yl 0) (make-interval (* xl yu) (* xu yu)))
                 ((< yu 0) (make-interval (* xu yl) (* xl yl)))
                 (else (make-interval (min (* xl yu) (* xu yl))
                                      (max (* xl yl) (* xu yu)))))))))

(define a (make-interval 2 4))
(define b (make-interval -2 4))
(define c (make-interval -4 -2))
(mul-interval a a)
(mul-interval a b)
(mul-interval a c)
(mul-interval b a)
(mul-interval b b)
(mul-interval b c)
(mul-interval c a)
(mul-interval c b)
(mul-interval c c)
